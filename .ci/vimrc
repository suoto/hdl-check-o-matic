syntax off
filetype plugin indent on
set nocompatible

set shortmess=filnxtToO

if $CI == "true"
    set rtp+=~/.vim/syntastic
    set rtp+=~/.vim/vim-hdl
else
    set rtp+=~/dot_vim/syntastic
    set rtp+=~/dot_vim/vim-hdl
endif

if has('python')
    let s:using_python2 = 1
elseif has('python3')
    let s:using_python2 = 0
else
    throw "Unable to identify Python version"
endif

function! s:Pyeval( eval_string ) "{ Inspired on YCM
  if s:using_python2
    return pyeval( a:eval_string )
  endif
  return py3eval( a:eval_string )
endfunction
"}
"
let s:python_until_eof = s:using_python2 ? "python << EOF" : "python3 << EOF"
let s:python_command = s:using_python2 ? "py " : "py3 "

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 1

let g:syntastic_vhdl_vimhdl_sort = 0
" let g:syntastic_vhdl_checkers = ['vimhdl']

" To avoid Press "ENTER..." message
set cmdheight=15

function! s:SetupPythonEnv() abort

  if exists('g:ci_setup_done') && g:ci_setup_done
      return
  endif

  exec s:python_until_eof
from __future__ import print_function
import logging
import os
import os.path as p
from threading import Lock

import six

def setupLogging(stream, level, color=True): # pragma: no cover
    "Setup logging according to the command line parameters"
    if isinstance(stream, six.string_types):
        class Stream(object):
            """
            File subclass that allows RainbowLoggingHandler to write
            with colors
            """
            _lock = Lock()
            _color = color

            def __init__(self, *args, **kwargs):
                self._fd = open(*args, **kwargs)

            def isatty(self):
                """
                Tells if this stream accepts control chars
                """
                return self._color

            def write(self, text):
                """
                Writes to the stream
                """
                with self._lock:
                    self._fd.write(text.encode('utf-8', errors='replace'))

        _stream = Stream(stream, 'ab', buffering=1)
    else:
        _stream = stream

    try:
        from rainbow_logging_handler import RainbowLoggingHandler
        handler = RainbowLoggingHandler(
            _stream,
            #  Customizing each column's color
            # pylint: disable=bad-whitespace
            color_asctime          = ('dim white',  'black'),
            color_name             = ('dim white',  'black'),
            color_funcName         = ('green',      'black'),
            color_lineno           = ('dim white',  'black'),
            color_pathname         = ('black',      'red'),
            color_module           = ('yellow',     None),
            color_message_debug    = ('color_59',   None),
            color_message_info     = (None,         None),
            color_message_warning  = ('color_226',  None),
            color_message_error    = ('red',        None),
            color_message_critical = ('bold white', 'red'))
            # pylint: enable=bad-whitespace
    except ImportError: # pragma: no cover
        handler = logging.StreamHandler(_stream)  # pylint: disable=redefined-variable-type
        log_format = "%(levelname)-8s || %(name)-30s || %(message)s"
        handler.formatter = logging.Formatter(log_format)

    logging.root.addHandler(handler)
    logging.root.setLevel(level)


def setupVimLogging():
    log_path = '/tmp'
    log_file = p.join(log_path, 'vim-hdl.log')
    index = 0
    while True:
        try:
            open(log_file, 'a').close()
            break
        except IOError:
            log_file = p.join(log_path, 'vim_log_%d_%d.log' % (os.getpid(), index))
            index += 1
    logging.getLogger('requests').setLevel(logging.WARNING)
    logging.getLogger('nose2').setLevel(logging.INFO)
    logging.getLogger('pynvim').setLevel(logging.INFO)
    logging.getLogger('urllib3').setLevel(logging.INFO)
    setupLogging(log_file, logging.DEBUG, True)

setupVimLogging()

_logger = logging.getLogger(__name__)

_logger.info("Set up vim python logger")

import vim

try:
    import coverage
    cov = coverage.Coverage(config_file='.coveragerc')
    cov.start()

    def onVimLeave():
        try:
            global cov
        except NameError:
            _logger.error("No coverage started, can't stop it")
            return

        try:
            cov.stop()
            cov.save()
            _logger.info("Coverage data saved")
        except:
            _logger.exception("Unable to save coverage data")

except:
    _logger.exception("Unable to import 'coverage'")

    def onVimLeave():
        _logger.warning("No coverage started, can't stop it")

EOF

    autocmd! VimLeavePre * :silent! call s:Pyeval('onVimLeave()')

    let g:ci_setup_done = 1

endfunction

call s:SetupPythonEnv()

