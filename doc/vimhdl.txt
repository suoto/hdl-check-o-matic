*vimhdl*    Vim plugin to aid VHDL development

                    .-.  .-..-.       .-. .-..----. .-.                      ~
                    | | / / '-'.-. .-.| | | || ..  \| |                      ~
                    | |/ /  .-.|  V  || '-' || | | || |                      ~
                    |   /   | || |V| || .-. || ''  /| '--.                   ~
                    '--'    '-''-' '-''-' '-''----' '----'                   ~
                      Vim plugin to aid VHDL development ~

==============================================================================
Contents ~

1.  Intro.............................................|vimhdl-intro|
    1.1. vimhdl version v0.3 and newer................|vimhdl-version-0.3|
    1.2. HDL Checker..................................|vimhdl-hdl-checker|
2.  User guide........................................|vimhdl-user-guide|
    2.1. Quickstart...................................|vimhdl-quickstart|
    2.2. JSON-style config file.......................|vimhdl-json-config-file|
    2.3. PRJ-style config file........................|vimhdl-prj-config-file|
    2.4. Style check..................................|vimhdl-style-check|
3.  Vim commands......................................|vimhdl-commands|
4.  Options...........................................|vimhdl-options|
    4.1. Configuration file...........................|vimhdl-config-file|
    4.2. Logging level................................|vimhdl-log-level|
    4.3. Log file.....................................|vimhdl-log-file|

==============================================================================
1. Intro                                                          *vimhdl-intro*

vimhdl is a plugin that implements an HTTP client that talks to |hdl-checker| so its
output is shown either on Vim's quickfix list via |Syntastic| or Vim's messages.

------------------------------------------------------------------------------
1 1  vimhdl version v0 3 and newer                          *vimhdl-version-0.3*

Starting from vimhdl 0.3, dependencies are not bundled anymore, which includes
|hdl-checker|. To make sure you have the dependencies needed, run from a
terminal: >

  pip install -r <path/to/where/vimhdl/in/installed>/requirements.txt

If vimhdl was installed using `vim-plug` defaults, that would be >

  pip install -r $HOME/.vim/plugged/vim-hdl/requirements.txt

------------------------------------------------------------------------------
1.2. HDL Checker             *hdlcc* *vimhdl-hdlcc* *hdl-checker* *vimhdl-hdl-checker*

HDL Checker is a language server that wraps VHDL/Verilg/SystemVerilog tools
that aims to reduce the boilerplate code needed to set things up. It supports
Language Server Protocol or a custom HTTP interface. HDL Checker automates
tasks when possible. Currently, this means

- Inferring library VHDL files likely belong to
- Taking dependencies into account when building so you don't need to provide
  a source list ordered by hand.
- Finding and rebuilding sources and design units that the compiler says are
  out of date (typically rebuilding sources that depend on package that has
  been changed)
- Easily switch between different compilers


==============================================================================
2. User guide                                                *vimhdl-user-guide*

------------------------------------------------------------------------------
2.1. Quickstart                                              *vimhdl-quickstart*
                                                      *vimhdl-compilers-options*

Vimhdl can be used with or without a config file. The full project file
documentation can be found at https://github.com/suoto/hdl_checker/wiki, which
is reproduced below.

HDL Checker can work with or without a configuration file. Both LSP and HTTP
mode function very similarly, except LSP mode will look for sources under a
workspace's root URI if no configuration file is found (therefore, as of now,
using LSP is preferred). More info on LSP can be found on the LSP Spec:
https://microsoft.github.io/language-server-protocol/specifications/specification-3-14/

Because automatic library discovery might be incorrect, one can use a JSON
configuration file to list files or to hint those which libraries were guessed
incorrectly.

Please note that if a configuration file is specified, no search is done, so
even though the file can specify paths with or without a library, it should
specify *all* paths.

Also, please note that the legacy project file format does not support listing
files without libraries.

If a configuration file is specified, HDL Checker will try to decode it as
JSON first and, if that fails, will parse as `prj`.

When using the legacy format, one can use `set filetype=vimhdl` to enable
syntax highlighting.

------------------------------------------------------------------------------
2.2. JSON-style config file                            *vimhdl-json-config-file*

JSON format is as show below:

**Note:** Notation below uses JSON5 for the comments for readability only,
configuration files follow "regular" JSON >

 {
   /*
    * List of source files (optional, defaults to []).  If specificed, must be
    * a list of either strings or source spec tuples, where source spec tuple
    * is a tuple in the form [string, dict[string, string]] (see below for
    * details).
    */
   "sources": [

     /*
      * Sources can be defined solely by their paths. Absolute paths are
      * unchanged, relative paths are made absolute by using the path to the
      * configuration file. Sources imported from an included file will follow
      * the same principle but using the path to the included path.
      */
     "/path/to/file_0",

     /*
      * Tuples can be used to add more info on the path. First element of the
      * tuple must the a string with the path, second element is optional
      * (defaults to an empty dictionary). Dictionary can specify the path's
      * library ({"library": "name_of_the_library"}, special compile
      * flags({"flags": ["flag_1", "flag_2"]}) or both.
      */
     [ "/path/with/library/and/flags", { "library": "foo", "flags": ["-2008"] } ],
     [ "/path/with/library",           { "library": "foo" } ],
     [ "/path/with/flags",             { "flags": ["-2008"] } ]
   ],

   /*
    * Extra config files to be added to the project (optional, defaults to [])
    * If specificed, must be a list of stings.
    */
   "include": [ "/path/to/another/json/file" ],

   /*
    * Language / scope specific info (optional, defaults to {}). Setting
    * these, event if empty, will override values defined per compiler. Flags
    * should be specified as a list of strings.
    *
    * The scope keys are:
    *   - "single": flags used to build the file being checked
    *   - "dependencies": flags used to build the dependencies of the file
    *     being checked
    *   - "global": flags used on both target and its dependencies
    *
    * For example, suppose the compilation sequence for a given source S is A,
    * B, C and then S. The tool will compile A, B and C using global and
    * dependencies flags, while S will be compiled using global and single
    * flags.
    */
   "vhdl": {
     "flags": {
       "single": ["flag_1", "flag_2"],
       "dependencies": [],
       "global": []
     }
   },
   "verilog": {
     "flags": {
       "single": [],
       "dependencies": [],
       "global": []
     }
   },
   "systemverilog": {
     "flags": {
       "single": [],
       "dependencies": [],
       "global": []
     }
   }
 }
<
------------------------------------------------------------------------------
2.3. PRJ-style config file                              *vimhdl-prj-config-file*

Old style project file syntax is as follows: >

 # This is a comment

 # This is being deprecated, listed here for documentation only!
 [ builder = (msim|ghdl|xvhdl) ]

 [ global_build_flags[ (vhdl|verilog|systemverilog) ] = <language specific flags> ]

 # Specifying sources
 (vhdl|verilog|systemverilog) <library name> <path/to/source> [file specific flags]
<

An example project file could be: >

 global_build_flags = -32  # Common flags for all languages
 global_build_flags[vhdl] = -rangecheck
 global_build_flags[verilog] = -lint
 global_build_flags[systemverilog] = -lint

 # Relative paths (relative to the project file if using HTTP mode or the
 # project root if using LSP mode)
 vhdl          my_library foo.vhd                               -check_synthesis
 vhdl          my_library foo_tb.vhd                            -2008
 verilog       my_library verilog/a_verilog_file.v              -pedanticerrors

 # Absolute paths are handled as such
 systemverilog my_library /home/user/some_systemverilog_file.sv -pedanticerrors

 # Wildcards are supported
 vhdl          my_library library/*.vhd
 vhdl          my_library library/*/*.vhd

Setting specific flags can be done per language or per file >

 global_build_flags[vhdl] = <flags passed to the compiler when building VHDL files>
 global_build_flags[verilog] = <flags passed to the compiler when building Verilog files>
 global_build_flags[systemverilog] = <flags passed to the compiler when building SystemVerilog files>

------------------------------------------------------------------------------
2.4. Style check                                            *vimhdl-style-check*

TODO...

==============================================================================
3. Vim commands                                              *vimhdl-commands*

------------------------------------------------------------------------------
                                               *vimhdl-commands-info* *VimhdlInfo*
:VimhdlInfo

Use this command to get the versions of both |vimhdl| and |hdl-checker|, the builder
currently in use and some |hdl-checker| server info.

------------------------------------------------------------------------------
                           *vimhdl-commands-rebuildproject* *VimhdlRebuildProject*
:VimhdlRebuildProject

Use this command if you feel either |vimhdl| or |hdl-checker| seem to be misbehaving.
This will cause |hdl-checker| to clean up both the project cache and the target
folder and restar building the project from scratch. Please note that on
project with large numbers of files this can be lengthy.

------------------------------------------------------------------------------
                             *vimhdl-commands-restartserver* *VimhdlRestartServer*
:VimhdlRestartServer

Restarts the |hdl-checker| server manually.


------------------------------------------------------------------------------
                     *vimhdl-commands-createprojectfile* *VimhdlCreateProjectFile*
:VimhdlCreateProjectFile [paths]

Runs a simple file finder on [paths] and tries to populate the contents of the
configuration file based on that. This can be used as a basis for writing your
own configuration files.

------------------------------------------------------------------------------
                       *vimhdl-commands-viewdependencies* *VimhdlViewDependencies*
:VimhdlViewDependencies

Prints the dependencies of the current file in the <library>.<design_unit>
format.

------------------------------------------------------------------------------
                     *vimhdl-commands-viewbuildsequence* *VimhdlViewBuildSequence*
:VimhdlViewBuildSequence

Prints out the build sequence of the current file for debuggin purposes.


==============================================================================
4. Options                                                      *vimhdl-options*

------------------------------------------------------------------------------
4.1. Configuration file                                     *vimhdl-config-file*

                                     *'b:vimhdl_conf_file'* *'g:vimhdl_conf_file'*

Type: string
Default: <unset>

See |vimhdl-quickstart| for a quick intro or a more complete version on GitHub
at https://github.com/suoto/hdl_checker/wiki.

Usage: >
    let g:vimhdl_conf_file = '<path/to/config/file>'
or >
    let b:vimhdl_conf_file = '<path/to/config/file>'

Note that b:vimhdl_conf_file have preference over g:vimhdl_conf_file.

------------------------------------------------------------------------------
4.2. Logging level                                            *vimhdl-log-level*

                                                          *'g:vimhdl_log_level'*

Type: string
Default: 'INFO'

Selects the log level to pass to the |hdl-checker| server upon starting it.
Valid values are CRITICAL, ERROR, WARNING, INFO and DEBUG. See also
|vimhdl-log-file|.

Usage: >
    let g:vimhdl_log_level = 'INFO'

------------------------------------------------------------------------------
4.3. Log file                                                  *vimhdl-log-file*

                                                           *'g:vimhdl_log_file'*

Type: string
Default: <unset>

Selects the log file to pass to the |hdl-checker| server upon starting it.
Relative paths will use |getcwd()|. If this variable is not set or set to an
empty string, |hdl-checker| will decide what to do. To get more info, see
|hdl-checker| help by running on a terminal >

  hdl_checker --help

Usage: >
    let g:vimhdl_log_level = 'INFO'

See also |vimhdl-log-level|.

==============================================================================

vim: ft=help
