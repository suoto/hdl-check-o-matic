*vimhdl*    Vim plugin to aid VHDL development

                    .-.  .-..-.       .-. .-..----. .-.                      ~
                    | | / / '-'.-. .-.| | | || ..  \| |                      ~
                    | |/ /  .-.|  V  || '-' || | | || |                      ~
                    |   /   | || |V| || .-. || ''  /| '--.                   ~
                    '--'    '-''-' '-''-' '-''----' '----'                   ~
                      Vim plugin to aid VHDL development ~

==============================================================================
Contents ~

1.  Intro.............................................|vimhdl-intro|
    1.1. hdlcc........................................|vimhdl-hdlcc|
    1.2. Supported compilers..........................|vimhdl-compilers-support|
2.  User guide........................................|vimhdl-user-guide|
    2.1. Quickstart...................................|vimhdl-quickstart|
    2.2. Style check..................................|vimhdl-style-check|
3.  Vim commands......................................|vimhdl-commands|
4.  Options...........................................|vimhdl-options|
    4.1. Configuration file...........................|vimhdl-config-file|
    4.2. Logging level................................|vimhdl-log-level|

==============================================================================
1. Intro                                                          *vimhdl-intro*

vimhdl is a plugin that implements an HTTP client that talks to |hdlcc| so its
output is shown either on Vim's quickfix list via |Syntastic| or Vim's messages.

------------------------------------------------------------------------------
1.1. hdlcc                                                  *hdlcc* *vimhdl-hdlcc*

hdlcc provides a Python API between a VHDL project and some HDL compilers to
catch errors and warnings the compilers generate that can be used to populate
syntax checkers and linters of text editors.

hdlcc automates tasks when possible. Currently, this means

- Taking dependencies into account when building so you don't need to provide
  a source list ordered by hand.
- Finding and rebuilding sources and design units that the compiler says are
  out of date (typically rebuilding sources that depend on package that has
  been changed)
- Easily switch between different compilers

==============================================================================
2. User guide                                                *vimhdl-user-guide*

------------------------------------------------------------------------------
2.1. Quickstart                                              *vimhdl-quickstart*
                                                      *vimhdl-compilers-options*

Vim-hdl requires a configuration file to begin with. The full project file
documentation can be found at https://github.com/suoto/hdlcc/wiki. The quick
version can be found below.

The basics:
- Anything from a '#' character until the end of the line is ignored
- Give options by doing
  option_name = option_value ~
    - Valid options are
      - global_build_flags: Flags that are always passed to the compiler
      - batch_build_flags: Flags passed to the compiler when building the
        entire project. This runs when the project is built for the first time
        or when |VimhdlRebuildProject| command is used
      - single_build_flags: Flags passed to the compiler when building a
        single file, i.e., when you save
      - builder: Compiler selection (msim = ModelSim, xvhdl = Xilinx XVHDL,
        ghdl)
      - target_dir: Location of the compiler files
- Source files are defined by doing
  vhdl library_name path_to_source build_flags                                ~
    - Build flags passed when adding a source file will be applied only to
      this specific source file

Use filetype=vimhdl to enable syntax highlighting.

------------------------------------------------------------------------------
2.2. Style check                                            *vimhdl-style-check*

TODO...

==============================================================================
3. Vim commands                                              *vimhdl-commands*

------------------------------------------------------------------------------
                                               *vimhdl-commands-info* *VimhdlInfo*
:VimhdlInfo

Use this command to get the versions of both |vimhdl| and |hdlcc|, the builder
currently in use and some |hdlcc| server info.

------------------------------------------------------------------------------
                           *vimhdl-commands-rebuildproject* *VimhdlRebuildProject*
:VimhdlRebuildProject

Use this command if you feel either |vimhdl| or |hdlcc| seem to be misbehaving.
This will cause |hdlcc| to clean up both the project cache and the target
folder and restar building the project from scratch. Please note that on
project with large numbers of files this can be lengthy.

------------------------------------------------------------------------------
                             *vimhdl-commands-restartserver* *VimhdlRestartServer*
:VimhdlRestartServer 

Restarts the |hdlcc| server manually.


------------------------------------------------------------------------------
                     *vimhdl-commands-createprojectfile* *VimhdlCreateProjectFile*
:VimhdlCreateProjectFile [paths]

Runs a simple file finder on [paths] and tries to populate the contents of the
configuration file based on that. This can be used as a basis for writing your
own configuration files.

------------------------------------------------------------------------------
                       *vimhdl-commands-viewdependencies* *VimhdlViewDependencies*
:VimhdlViewDependencies 

Prints the dependencies of the current file in the <library>.<design_unit>
format.

------------------------------------------------------------------------------
                     *vimhdl-commands-viewbuildsequence* *VimhdlViewBuildSequence*
:VimhdlViewBuildSequence

Prints out the build sequence of the current file for debuggin purposes.


==============================================================================
4. Options                                                      *vimhdl-options*

------------------------------------------------------------------------------
4.1. Configuration file                                     *vimhdl-config-file*

                                     *'b:vimhdl_conf_file'* *'g:vimhdl_conf_file'*

Type: string
Default: <unset>
See |vimhdl-quickstart| for a quick intro or a more complete version on GitHub
at https://github.com/suoto/hdlcc/wiki.

Usage:
    let g:vimhdl_conf_file = '<path/to/config/file>'
or
    let b:vimhdl_conf_file = '<path/to/config/file>'

Note that b:vimhdl_conf_file have preference over g:vimhdl_conf_file.

------------------------------------------------------------------------------
4.2. Logging level                                            *vimhdl-log-level*

                                                          *'g:vimhdl_log_level'*

Type: string
Default: 'INFO'
Select the debug level from the |hdlcc| server instance. Valid values are
CRITICAL, ERROR, WARNING, INFO and DEBUG. The log level is placed at
"/tmp/hdlcc.log"

    let g:vimhdl_log_level = 'INFO'


==============================================================================

vim: ft=help
